@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .

{
    # Make a a for-loop ..
    #   X a variable or numberable
    #   Y a variable or numberable
    4 log:repeat ?I .
}
=>
{
    :test :number ?I .
} .

# A more elaborate example. Split a list in parts of length 4
:List :contains (:a :b :c :d :e :f :g :h :i :j :k :l) .

{
    :List :contains ?X .

    # L = length list
    ?X list:length ?L .

    # Q = number of parts = L / 4
    ( ?L 4 ) math:quotient ?Q .

    # For I = 0 .. Q
    ?Q log:repeat ?I .

    # P = 4 * I
    (?I 4) math:product ?P .

    # X1 = P + 1 ; X2 = P + 2 ; X3 = P + 3 ; X4 = P + 4
    (?P 0) math:sum ?X1 .
    (?P 1) math:sum ?X2 .
    (?P 2) math:sum ?X3 .
    (?P 3) math:sum ?X4 .

    # Read the members at these positions
    (?X ?X1) list:memberAt ?Y1 .
    (?X ?X2) list:memberAt ?Y2 .
    (?X ?X3) list:memberAt ?Y3 .
    (?X ?X4) list:memberAt ?Y4 .
}
=> 
{
    :List :part (?Y1 ?Y2 ?Y3 ?Y4) .
} .

# Test
{   
    :test :number 0 .
    :test :number 1 .
    :test :number 2 .
    :test :number 3 .

    :List :part (:a :b :c :d) .
    :List :part (:e :f :g :h) .
    :List :part (:i :j :k :l) .
}
=> 
{
    :test :is true .
} .