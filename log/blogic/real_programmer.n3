@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

############################################## 
# Test 1

# Bob 
:Bob :eats :Quiche.

# This should fail
#:Bob a :RealProgrammer .

#
##############################################

############################################## 
# Test 2

# Alice doesn't eat Quiche
() log:negativeSurface {
    :Alice :eats :Quiche .
} .

# This should fail
#:Alice :eats :Quiche .

#
##############################################

############################################## 
# Test 3

() log:negativeSurface {
    :Charly a :RealProgrammer .
} .

#
##############################################

# An exclusive disjunction P <-/-> Q means that P is true or Q but not both
# This is same as
#     P <-> ~Q
# and is the same as
#     ( P -> ~Q ) AND (~Q -> P)
# P = eat quiche
# Q = real programmer
(_:S) log:negativeSurface {

    _:S :eats :Quiche .

    () log:negativeSurface {
    
        () log:negativeSurface {
            _:S a :RealProgrammer .
        } .
    } .
}.

(_:S) log:negativeSurface {

    () log:negativeSurface {
        _:S a :RealProgrammer .
    } .

    () log:negativeSurface {
        _:S :eats :Quiche .
    } .
}.

# P (eat quiche) -> Q ( you are a programmer)
#
# P -> Q = ~ ( P AND ~Q )
(_:S) log:negativeSurface {
    # P
    _:S :eats :Quiche .

    # -- implicit AND 

    # NOT
    () log:negativeSurface {
        # Q
        _:S a :Programmer .
    } .
} .

(_:S _:C) log:querySurface {
    _:S a _:C.
} .

(_:S _:C) log:querySurface {
    _:S :eats _:C .
} .

(_:S _:C) log:querySurface {
    () log:negativeSurface { _:S :eats _:C } .
} .

(_:S _:C) log:querySurface {
    () log:negativeSurface { _:S a _:C } .
} .