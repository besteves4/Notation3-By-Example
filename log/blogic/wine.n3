@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:ChateauxGreysac a :French , :Wine .
:Badenhorst a :SouthAfrican , :Wine .
:Croissant a :French, :Bread .

# ∀ x : ( x a Wine ) -> ( x contains Alcohol )
(_:X) log:onNegativeSurface {
    _:X a :Wine .

    () log:onNegativeSurface {
        _:X :contains :Alcohol .
    } .
} .

# The rule below is
# ( ∀ x1 : ( x1 a Wine ) -> ( x1 contains Alcohol ) ) ->
#   ( ∀ x2 : ( x2 a French ) -> ( x2 needs ImportTax ) ) 
#
# Question: how to write (what we actually need in this test)
#  ∀ x : ( 
#         ( ( x a Wine ) -> ( x contains Alcohol ) )  ->
#         ( ( x a French ) -> ( x needs ImportTax ) )
#  ) 
(_:X1 _:X2) log:onNegativeSurface {
    (_:X1) log:onNegativeSurface {
        _:X1 a :Wine .

        () log:onNegativeSurface {
            _:X1 :contains :Alcohol .
        } .
    } . 
    () log:onNegativeSurface {
        (_:X2) log:onNegativeSurface {
            _:X2 :contains :Alcohol .
            _:X2 a :French .

            () log:onNegativeSurface {
                _:X2 :needs :ImportTax .
            } .
        } . 
    } .
} .

# Output
(_:S _:P) log:onQuerySurface {
    _:S a _:P .
} .

(_:S _:P) log:onQuerySurface {
    _:S :contains _:P .
} .

(_:S _:P) log:onQuerySurface {
    _:S :needs _:P .
} .

# Test

() log:onNegativeSurface {
    :Croissant :needs :ImportTax .
} .

() log:onNegativeSurface {
    :Badenhorst :needs :ImportTax .
} .

() log:onNegativeSurface {
    :ChateauxGreysac :needs :ImportTax .

    () log:onNegativeSurface {
        :test :is true .
    } .
} .  

() log:onQuerySurface {
    :test :is true .
} .