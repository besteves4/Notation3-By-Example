@prefix : <https://github.com/eyereasoner/Notation3-By-Example/example/n3s#> .
@prefix q: <https://github.com/eyereasoner/Notation3-By-Example/example/n3q#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .

(_:A _:G _:X _:Xp _:Y _:Yp _:Ypp _:NewG) log:onNegativeSurface {
    _:A :implies _:G .
    _:A :qvar2bn (_:Xp _:X).
    _:G :qvar2bn (_:Yp _:Y).

    _:Yp :keepFlagged _:Ypp .

    ( _:X
      { _:Ypp log:onNegativeSurface _:Y }
    ) graph:union _:NewG .

    () log:onNegativeSurface {
        _:Xp log:onNegativeSurface2 _:NewG .
        _:Yp log:onQuerySurface2 _:Y .
    } .
} .

(_:X _:Y _:Z _:T1 _:T2 _:L) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :qvar2bn (_:Y _:Z).
    } .
    _:X graph:list _:L .
    ( _:L () () ) :_qvar2bn (_:T1 _:T2) .
    _:T2 list:unique _:Y .
    _:Z graph:list _:T1 .
} .

(_:Acc1 _:Acc2 ) log:onNegativeSurface {
    () log:onQuerySurface {
        (() _:Acc1 _:Acc2) :_qvar2bn (_:Acc1 _:Acc2) .
    } .
} .

(
    _:L _:X _:Acc1 _:Acc2 
    _:Acc1New _:Acc2New _:Acc2S _:Acc2P 
    _:N _:H _:T 
    _:S _:P _:O
    _:Sv _:Pv _:Ov
    _:Scope
) log:onNegativeSurface {
    () log:onQuerySurface {
        (_:L _:Acc1 _:Acc2) :_qvar2bn _:X .
    } .
    _:L log:rawType rdf:List .
    _:L list:length _:N .
    _:N math:greaterThan 0 .

    _:L list:firstRest (_:H _:T) .

    _:H log:includes { _:S _:P _:O } .

    _:S :skolemize _:Sv .
    _:P :skolemize _:Pv .
    _:O :skolemize _:Ov .

    (
        { _:S log:equalTo _:Sv }
        { _:Acc2 log:equalTo _:Acc2S }
        { (_:Acc2 (_:Sv)) list:append _:Acc2S }
    ) log:ifThenElseIn _:Scope .

    (
        { _:P log:equalTo _:Pv }
        { _:Acc2S log:equalTo _:Acc2P }
        { (_:Acc2S (_:Pv)) list:append _:Acc2P }
    ) log:ifThenElseIn _:Scope .

    (
        { _:O log:equalTo _:Ov }
        { _:Acc2P log:equalTo _:Acc2New }
        { (_:Acc2P (_:Ov)) list:append _:Acc2New }
    ) log:ifThenElseIn _:Scope .

    ( _:Acc1 ({ _:Sv _:Pv _:Ov }) ) list:append _:Acc1New .

    ( _:T _:Acc1New _:Acc2New ) :_qvar2bn _:X .
} .

(_:Y _:X _:Xn _:Xnp _:Scope) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :skolemize _:Y .
    } .

    ( 
        {
            _:X log:namespace _:Xn .
            _:Xn log:equalTo "https://github.com/eyereasoner/Notation3-By-Example/example/n3q#" .
        }
        {
            _:X log:skolem _:Y .
        }
        {
            # If we got a blank node, write it into a 'flagged' skolem
            # to trigger generating a universal in :_qvar2bn
            (
                {
                    _:X :isSkolem true .
                }
                {
                    # Rewrite the skolem to trigger creating a universal
                    [] :flaggedSkolem _:Y .
                }
                {
                    _:X log:equalTo _:Y .
                }
            ) log:ifThenElseIn _:Scope .
        }
    ) log:ifThenElseIn _:Scope .
} .

(_:X _:Xn) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :isSkolem true .
    } .
    _:X log:namespace _:Xn .
    _:Xn string:contains ".well-known/genid/" .
} .

(_:X _:Y _:T1 _:T2 _:T3) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :flaggedSkolem _:Y .
    } .
    _:X log:skolem _:T1 .
    _:T1 log:uri _:T2 .
    ( _:T2 "-flagged" ) string:concatenation _:T3 .
    _:Y log:uri _:T3 .
} .

(_:X _:T1 _:Y _:Scope) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :isFlagged _:Y .
    } .
    _:X log:uri _:T1 .
    (
        {
            _:T1 string:contains ".well-known/genid/" .
            _:T1 string:endsWith "-flagged" .
        }
        {
            _:Y log:equalTo true .
        }
        {
            _:Y log:equalTo false .
        }
    ) log:ifThenElseIn _:Scope .
} .

(_:X _:Y _:T) log:onNegativeSurface {
    () log:onQuerySurface {
        _:X :keepFlagged _:Y .
    } .
    (_:X ()) :_keepFlagged _:Y .
} .

(_:Acc) log:onNegativeSurface {
    () log:onQuerySurface {
        ( () _:Acc ) :_keepFlagged _:Acc .
    } .
} .

(_:X _:Acc _:Y _:H _:T _:N _:AccNew _:Scope) log:onNegativeSurface {
    () log:onQuerySurface {
        ( _:X _:Acc ) :_keepFlagged _:Y .
    } .

    _:X log:rawType rdf:List .
    _:X list:length _:N .
    _:N math:greaterThan 0 .

    _:X list:firstRest (_:H _:T) .

    (
        { _:H :isFlagged true }
        {
            ( _:Acc (_:H)) list:append _:AccNew .
        }
        {
            _:Acc log:equalTo _:AccNew .
        }
    ) log:ifThenElseIn _:Scope .

    ( _:T _:AccNew ) :_keepFlagged _:Y .
} .

# Debug
(_:S _:O) log:onQuerySurface {
    _:S log:onNegativeSurface2 _:O .
} .

(_:S _:O) log:onQuerySurface {
    _:S log:onQuerySurface2 _:O .
} .