@prefix : <urn:example.org:> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .

# Check if the policies are valid

(_:Policy _:Permission _:Constraint _:LO _:O _:RO) log:onNegativeSurface {

    # Gather all the metadata of the policy
    _:Policy a odrl:Offer .
    _:Policy odrl:permission _:Permission .
    _:Permission odrl:constraint _:Constraint .

    # This is a logical constraint that is in the policy
    _:Constraint odrl:leftOperand _:LO .
    _:Constraint odrl:operator _:O .
    _:Constraint odrl:rightOperand _:RO .

    () log:onNegativeSurface {
        # Here we execute the logical constraint and make the policy valid
        # when the contrain holds
        () log:onNegativeSurface {
            _:LO _:O _:RO .
            () log:onNegativeSurface {
                _:Constraint :is :Valid .
            } .
        } .
    } .
} .

# Implementation of an odrl:lt checker for dates
(_:Blank _:CurrentDate _:Date) log:onNegativeSurface {
    () log:onQuerySurface {
        odrl:dateTime odrl:lt _:Date .
    } .
    _:Blank :currentDate _:CurrentDate  .
    _:CurrentDate string:lessThan _:Date .
} .

# Implementation of an odrl:gt checker for dates
(_:Blank _:CurrentDate _:Date) log:onNegativeSurface {
    () log:onQuerySurface {
        odrl:dateTime odrl:gt _:Date .
    } .
    _:Blank :currentDate _:CurrentDate  .
    _:CurrentDate string:greaterThan _:Date .
} .

# When a constraint is (in)valid, then the policy is (in)valid
(_:Policy _:Permission _:Constraint _:Valid) log:onNegativeSurface {
    _:Policy a odrl:Offer .
    _:Policy odrl:permission _:Permission.
    _:Permission odrl:constraint _:Constraint .
    _:Constraint :is _:Valid .
    () log:onNegativeSurface {
        _:Policy :is _:Valid .
    } .
} .

# Here we add a validation, a policy can't be both valid and invalid
(_:S) log:onNegativeSurface {
    _:S a odrl:Offer . 
    _:S :is :Valid .
    _:S :is :NotValid .
} .

# Show something on the output
(_:S _:O) log:onQuerySurface {
    _:S :is _:O .
} .